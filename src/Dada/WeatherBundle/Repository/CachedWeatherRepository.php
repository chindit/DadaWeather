<?php

namespace Dada\WeatherBundle\Repository;

/**
 * CachedWeatherRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CachedWeatherRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Select cache for a specific location determined by GPS coordinates
     * 
     * @param $lat float latitude
     * @param $long float longitude
     * @param $single bool get array(int) of full CachedWeather object
     * @return mixed array(int) if $single is false or CachedWeather if $single
     */
    public function findByCoords($lat, $long, $single = false){
        $query = $this->createQueryBuilder('a');
        if(!$single)
            $query = $query->select('a.id');
        $query->where('a.latitude BETWEEN :lat_min AND :lat_max')
            ->andWhere('a.longitude BETWEEN :long_min AND :long_max')
            ->setParameter('lat_min', ((float)$lat)-(1/60))
            ->setParameter('lat_max', ((float)$lat)+(1/60))
            ->setParameter('long_min', ((float)$long)-(1/60))
            ->setParameter('long_max', ((float)$long)+(1/60));
        $query = $this->addExpiration($query);
        return ($single) ? $query->getQuery->getSingleResult() : $query->getQuery()->getResult();
    }

    /**
     * Get cache for ID town
     *
     * @param $id int Town ID
     * @param $single bool get array(int) of full CachedWeather object
     * @return mixed
     */
    public function findByTownId($id, $single = false){
        $query = $this->createQueryBuilder('a');
        if(!$single)
            $query = $query->select('a.id');
        $query->where('a.townId = :id')
            ->setParameter('id', $id);
        $query = $this->addExpiration($query);
        return ($single) ? $query->getQuery()->getSingleResult() : $query->getQuery()->getResult();
    }

    /**
     * Get cache for Town name
     *
     * @param $name
     * @param $single bool get array(int) of full CachedWeather object
     * @return mixed
     */
    public function findByTownName($name, $single = false){
        $query = $this->createQueryBuilder('a');
        if(!$single)
            $query = $query->select('a.id');
        $query->where('a.townName = :name')
            ->setParameter('name', $name);
        $query = $this->addExpiration($query);
        return ($single) ? $query->getQuery->getSingleResult() : $query->getQuery()->getResult();
    }

    /**
     * Clean the cache.  Delete all entries older than 1h
     */
    public function cleanCache(){
        $date = new \DateTime();
        $date->modify('-1 hour');
        $query = $this->getEntityManager()->createQuery('DELETE Dada\WeatherBundle\Entity\CachedWeather dcw WHERE dcw.registered < :date')
            ->setParameter('date', $date);
        $query->execute();
    }

    /**
     * Add an expiration time to all cache queries
     * @param $query QueryBuilder Query to be executed
     * @return QueryBuilder Query with expiration added.
     */
    private function addExpiration($query){
        $date = new \DateTime();
        $date->modify('-1 hour');
        
        return $query->andWhere('a.registered > :date')
            ->setParameter('date', $date);
    }
}
